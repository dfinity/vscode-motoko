{
    "For Loop (Collection)": {
        "prefix": [
            "for-each"
        ],
        "body": [
            "for(${1:x} in ${2:iter}.vals()) {",
            "\t$0",
            "};"
        ],
        "description": "A for loop which iterates through a collection."
    },
    "For Loop (Range)": {
        "prefix": [
            "for-range"
        ],
        "body": [
            "for(${1:i} in Iter.range(0, ${2:count} - 1)) {",
            "\t$0",
            "};"
        ],
        "description": "A for loop over a numeric range."
    },
    "Simple Type": {
        "prefix": [
            "type"
        ],
        "body": [
            "type ${1:Name} = ${2:declaration};"
        ],
        "description": "Simple type declaration"
    },
    "Object Type": {
        "prefix": [
            "type-obj"
        ],
        "body": [
            "type ${1:Name} = {",
            "\t${2:attribute} : ${3:Type};",
            "};"
        ],
        "description": "an object type block"
    },
    "Type Variant": {
        "prefix": [
            "type-variant"
        ],
        "body": [
            "type ${1:Name} = {",
            "\t#${2:Attribute};",
            "};"
        ],
        "description": "a variant type block"
    },
    "Mutable Variable": {
        "prefix": "var",
        "body": [
            "var ${1} = ${2};"
        ],
        "description": "declares a mutable variable"
    },
    "Immutable Variable": {
        "prefix": "let",
        "body": [
            "let ${1} = ${2};"
        ],
        "description": "declares an immutable variable"
    },
    "Simple Function": {
        "prefix": [
            "func"
        ],
        "body": [
            "func ${1:name} (4{2:arg} : ${5:type}) : ${4:returnType} {",
            "\t${5};",
            "};"
        ],
        "description": "Simple function declaration"
    },
    "Actor Function": {
        "prefix": [
            "actor-func"
        ],
        "body": [
            "public func ${1:name} (4{2:arg} : ${5:type}) : async ${4:returnType} {",
            "\t${5};",
            "};"
        ],
        "description": "Public actor function declaration"
    },
    "Base Library Import": {
        "prefix": [
            "import-base"
        ],
        "body": [
            "import ${1:Module} \"mo:base/${1}\";"
        ]
    },
    "Switch Statement": {
        "prefix": [
            "switch"
        ],
        "body": [
            "switch(${1:input}) {",
            "\tcase($2) { $0 };",
            "\tcase($3) { };",
            "};"
        ]
    },
    "Switch Statement (Option)": {
        "prefix": [
            "switch-option"
        ],
        "body": [
            "switch(${1:input}) {",
            "\tcase(?${2:value}) { $0 };",
            "\tcase(null) { };",
            "};"
        ]
    },
    "Switch Statement (Result)": {
        "prefix": [
            "switch-result"
        ],
        "body": [
            "switch(${1:input}) {",
            "\tcase(#ok(${2:value})) { $0 };",
            "\tcase(#err(${3:error})) { };",
            "};"
        ]
    },
    "Module": {
        "prefix": [
            "actor"
        ],
        "body": [
            "module {",
            "\tpublic let ${2:value} = ${3:0};",
            "\t",
            "\tpublic func ${4:name}(${5:input : Text}) : ${6:()} {",
            "\t\t$0",
            "\t};",
            "};"
        ]
    },
    "Actor": {
        "prefix": [
            "actor"
        ],
        "body": [
            "actor {",
            "\tstable var ${2:state} = ${3:0};",
            "\t",
            "\tpublic func ${4:name}(${5:input : Text}) : async ${6:()} {",
            "\t\t$0",
            "\t};",
            "};"
        ]
    },
    "Actor Class": {
        "prefix": [
            "actor-class"
        ],
        "body": [
            "actor class ${1:Name}($2) = self {",
            "\tstable var ${3:state} = ${4:0};",
            "\t",
            "\tpublic func ${5:name}(${6:input : Text}) : async ${7:()} {",
            "\t\t$0",
            "\t};",
            "};"
        ]
    },
    "Class": {
        "prefix": [
            "class"
        ],
        "body": [
            "class ${1:Name}($2) = self {",
            "\tvar ${3:state} = ${4:0};",
            "\t",
            "\tpublic func ${5:name}(${6:input : Text}) : ${7:()} {",
            "\t\t$0",
            "\t};",
            "};"
        ]
    },
    "Record": {
        "prefix": [
            "record"
        ],
        "body": [
            "{",
            "\t${1:key} = ${2:value};",
            "}"
        ]
    },
    "Do Block": {
        "prefix": [
            "do"
        ],
        "body": [
            "do {",
            "\t$0",
            "}"
        ]
    },
    "Anonymous Function": {
        "prefix": [
            "lambda"
        ],
        "body": [
            "func ($1) { $0 }"
        ]
    },
    "Array Literal": {
        "prefix": [
            "array"
        ],
        "body": [
            "[$0]"
        ]
    },
    "Mutable Array Literal": {
        "prefix": [
            "array-mut"
        ],
        "body": [
            "[var $0]"
        ]
    },
    "New Array": {
        "prefix": [
            "new-array"
        ],
        "body": [
            "var ${1:array} = [];"
        ]
    },
    "New Hash Map": {
        "prefix": [
            "new-hash-map"
        ],
        "body": [
            "let ${1:map} = HashMap.HashMap<${2:Text}, ${3:Text}>(0, ${2}.equal, ${2}.hash);"
        ]
    },
    "New Trie": {
        "prefix": [
            "new-trie"
        ],
        "body": [
            "var ${1:trie} = Trie.empty<${2:Text}, ${3:Text}>();"
        ]
    },
    "New Trie Map": {
        "prefix": [
            "new-trie-map"
        ],
        "body": [
            "let ${1:map} = TrieMap.TrieMap<${2:Text}, ${3:Text}>(0);"
        ]
    },
    "New RB Tree": {
        "prefix": [
            "new-rb-tree"
        ],
        "body": [
            "let ${1:map} = RBTree.RBTree<${2:Text}, ${3:Text}>(${2}.compare);"
        ]
    },
    "New Trie Set": {
        "prefix": [
            "new-trie-set"
        ],
        "body": [
            "let ${1:set} = TrieSet.empty<${2:Text}>();"
        ]
    },
    "New Deque": {
        "prefix": [
            "new-deque"
        ],
        "body": [
            "let ${1:queue} = Deque.empty<${2:Text}>();"
        ]
    },
    "New List": {
        "prefix": [
            "new-list"
        ],
        "body": [
            "var ${1:list} = List.nil<${2:Text}>();"
        ]
    },
    "Sort Array": {
        "prefix": [
            "sort-array"
        ],
        "body": [
            "Array.sort<$1>(${2:array}, func (a : $1, b : $1) { ${3:#equal} })"
        ]
    },
    "Ok (Result)": {
        "prefix": [
            "ok"
        ],
        "body": [
            "#ok($0)"
        ]
    },
    "Error (Result)": {
        "prefix": [
            "err"
        ],
        "body": [
            "#err($0)"
        ]
    },
    "Array to Blob": {
        "prefix": [
            "array-2-blob"
        ],
        "body": [
            "Blob.fromArray(${1:array})"
        ]
    },
    "Blob to Array": {
        "prefix": [
            "blob-2-array"
        ],
        "body": [
            "Blob.toArray(${1:blob})"
        ]
    },
    "Array to Buffer": {
        "prefix": [
            "array-2-buffer"
        ],
        "body": [
            "Buffer.fromArray(${1:array})"
        ]
    },
    "Buffer to Array": {
        "prefix": [
            "buffer-2-array"
        ],
        "body": [
            "Buffer.toArray(${1:buffer})"
        ]
    },
    "Principal to Text": {
        "prefix": [
            "principal-2-text"
        ],
        "body": [
            "Principal.toText(${1:principal})"
        ]
    },
    "Text to Principal": {
        "prefix": [
            "text-2-principal"
        ],
        "body": [
            "Principal.fromText(${1:text})"
        ]
    },
    "Actor to Principal": {
        "prefix": [
            "actor-2-principal"
        ],
        "body": [
            "Principal.fromActor(${1:actor})"
        ]
    }
}
